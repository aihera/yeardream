# 실습 1
import math #제곱근 계산을 위한 math 모듈 사용

#테스트 케이스 수 입력
T = int(input()) #테스트 케이스 개수

#테스트 케이스 반복
for _ in range(T):
    N = int(input())       #검사할 수 N 입력
    sqrt_N = int(math.sqrt(N)) # N의 제곱근을 정수로 변환 (소수점 내림)

    if sqrt_N * sqrt_N == N: #제곱했을 때 원래 수와 같으면 > 완전제곱수
        print("Odd") # 완전제곱수면 "Odd" 출력

    else:
        print("Even")  #아니면 "Even" 출력


## 실습 2
import math     #수학연산을 위한 모듈 (제곱근 등 사용)
T = int(input())    #테스트 케이스 개수 입력

for _ in range(T):
    n = int(input())    #검사할 정수 n 입력
    cnt = 0     # 약수 개수 카운터 초기화

# 1부터 sqrt(n)까지 나눠서 약수와 짝을 센다
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:      # i가 n의 약수라면
            cnt += 1        #i와 짝을 이루는 약수 (ㅜ // 1)가 존재함

    cnt *=2     #약수는 짝으로 존재하므로 2배 (i, n//i)


#완전제곱수의 경우 (예: n=9 > 3*3) 중복 제거
    if math.isqrt(n) ** 2 == n:     #정수 제곱근의 제곱이 원래 수와 같으면
        cnt -= 1        #중복된 약수 ( ex: 3 * 3에서 3) 하나 제거

# 약수 개수가 홀수면 Odd, 짝수면 Even 출력
    print("Odd": if cnt % 2 == 1 else "Even")



#실습 3
def gcd(a, b):
    #유클리드 호제법으로 최대공약수(GCD) 계산
    while b != 0:
        temp = a        #현재 a를 저장
        a = b           #b를 a로 교체
        b = temp % b    #b는 a % b로 교체
    return a            #b가 0이 되면 a가 최대공약수

def lcm (a. b):
    # 최소공배수)LCM) = 두 수의 곱 // 최대공약수
    return a * b // gcd(a, b)

def main():
    #사용자 입력: 두 정수 n, m
    n, m = map(int, input().split())

    # 최대공약수와 최소공배수 계산
    result_gcd = gcd(n, m)
    result_lcm = lcm(n, m)

    #결과 출력
    print(result_gcd, result_lcm)

#프로그램 시작점 (main 함수 실행)
if__name__ == "__main__":
    main()


#실습 4
def main():
    n = int(input()) #사용자로부터 정수 n 입력
    arr = [0] * (n +1)      #크기 n+1짜리 배열 생성 (0으로 초기화)

#소수 아닌 수(합성수)표시 - 에라토스테네스의 체 원리
    for i in range(2, n + 1):
        if arr[i] == 0:     #아직 표시되지 않았다면 소수
            for j in range(2  * i, n + 1, i):   # i의 배수는 모두 소수가 아님
                if arr[j] == 0:
                    arr[j] += 1     #소수가 아님 표시 (값을 1로 변경)

    cnt = 0     #소수 개수 세기
    for i in range(2, n + 1):
        if arr[i] == 0:     #0이면 소수로 남아있는 수
            cnt += 1

    print(cnt)  #결과 출력

#메인 함수 호출
if __name__ == "__main__":
    main()